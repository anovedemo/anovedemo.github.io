<?xml version="1.0" encoding="utf-8"?>
<draftsman project-name="Demo" xmlns="https://tracepaper.draftsman.io">
	<global>
	</global>
	<events>
		<event graphql-namespace="ControlTemplate" graphql-name="create" name="CreateControlTemplateRequested" authorization="authenticated" type="ActorEvent">
			<field name="arn" type="String"></field>
			<field name="description" type="String"></field>
		</event>
		<event graphql-namespace="Control" graphql-name="update" name="UpdateControlRequested" authorization="authenticated" type="ActorEvent">
			<field name="company" type="String"></field>
			<nested-object name="controls">
				<field name="name" type="String"></field>
				<field name="linkedRequirements" type="String"></field>
				<field name="description" type="String"></field>
			</nested-object>
		</event>
		<event graphql-namespace="Regulation" graphql-name="addRequirement" name="AddRequirementRegulationRequested" authorization="authenticated" type="ActorEvent">
			<field name="name" type="String"></field>
			<field name="description" type="String"></field>
			<field name="regulation" type="String"></field>
		</event>
		<event graphql-namespace="Company" graphql-name="create" name="CreateCompanyRequested" authorization="authenticated" type="ActorEvent">
			<field name="name" type="String"></field>
		</event>
		<event graphql-namespace="Regulation" graphql-name="create" name="CreateRegulationRequested" authorization="authenticated" type="ActorEvent" role="domainexpert">
			<field name="name" type="String"></field>
		</event>
		<event graphql-namespace="Company" graphql-name="linkRegulation" name="LinkRegulationCompanyRequested" authorization="authenticated" type="ActorEvent">
			<field name="companyName" type="String"></field>
			<field name="regulationName" type="String"></field>
		</event>
		<event name="ControlTemplateCreated" source="Regulations.ControlTemplate" type="DomainEvent">
			<field name="arn" type="String"></field>
			<field name="description" type="String"></field>
		</event>
		<event name="RegulationCreated" source="Regulations.Regulation" type="DomainEvent">
			<field name="name" type="String"></field>
		</event>
		<event name="RequirementAdded" source="Regulations.Regulation" type="DomainEvent">
			<field name="name" type="String"></field>
			<nested-object name="requirements">
				<field name="name" type="String"></field>
				<field name="description" type="String"></field>
			</nested-object>
		</event>
		<event name="CompanyCreated" source="Customer.Company" type="DomainEvent">
			<field name="name" type="String"></field>
		</event>
		<event name="UpdatedControl" source="Customer.Company" type="DomainEvent">
			<field name="name" type="String"></field>
			<nested-object name="controls" business-key="name">
				<field name="description" type="String"></field>
				<field name="linkedRequirements" type="String"></field>
				<field name="name" type="String"></field>
			</nested-object>
		</event>
		<event name="LinkedRegulation" source="Customer.Company" type="DomainEvent">
			<field name="name" type="String"></field>
			<nested-object name="regulations">
				<field name="name" type="String"></field>
				<field name="link" type="String"></field>
			</nested-object>
		</event>
	</events>
	<domain>
		<subdomain name="Regulations">
			<aggregate name="ControlTemplate" business-key="arn" event-ttl="-1" snapshot-interval="100" backup-interval-days="0" backup-ttl-days="0">
				<field name="arn" type="String"></field>
				<field name="description" type="String"></field>
				<command name="Create">
					<trigger source="CreateControlTemplateRequested" key-field="arn">
						<mapping target="arn" value="arn"></mapping>
						<mapping target="description" value="description"></mapping>
					</trigger>
					<processor type="emit-event" id="LtyZYM" ref="ControlTemplateCreated">
						<mapping target="arn" value="#flow.arn"></mapping>
						<mapping target="description" value="#flow.description"></mapping>
					</processor>
					<test-case name="HappyFlow" trigger-event="CreateControlTemplateRequested">
						<input name="arn" value="gdpr:req1:template1" type="String"></input>
						<input name="description" value="lorem ipsum" type="String"></input>
						<expected domain-event="ControlTemplateCreated">
							<field value="gdpr:req1:template1" name="arn" type="String"></field>
							<field value="lorem ipsum" name="description" type="String"></field>
						</expected>
						<expected-state pk="gdpr:req1:template1">{
  "arn": "gdpr:req1:template1",
  "description": "lorem ipsum"
}</expected-state>
					</test-case>
				</command>
				<event-handler on="ControlTemplateCreated">
					<mapping target="arn" operand="set" value="arn"></mapping>
					<mapping target="description" operand="set" value="description"></mapping>
				</event-handler>
			</aggregate>
			<aggregate name="Regulation" business-key="name" event-ttl="-1" snapshot-interval="100" backup-interval-days="0" backup-ttl-days="0">
				<field name="name" type="String"></field>
				<command name="Create" create-command="true">
					<trigger source="CreateRegulationRequested" key-field="name">
						<mapping target="name" value="name"></mapping>
					</trigger>
					<processor type="emit-event" id="vlDm8P" ref="RegulationCreated">
						<mapping target="name" value="#flow.name"></mapping>
					</processor>
					<test-case name="HappyFlow" trigger-event="CreateRegulationRequested">
						<input name="name" value="gdpr" type="String"></input>
						<expected domain-event="RegulationCreated">
							<field value="gdpr" name="name" type="String"></field>
						</expected>
						<expected-state pk="gdpr">{
  "name": "gdpr",
  "requirements": {}
}</expected-state>
					</test-case>
				</command>
				<command name="AddRequirement">
					<trigger source="AddRequirementRegulationRequested" key-field="regulation">
						<mapping target="name" value="name"></mapping>
						<mapping target="description" value="description"></mapping>
						<mapping target="regulation" value="regulation"></mapping>
					</trigger>
					<processor type="code" id="XFXrqI" file="" handler="" code='flow.requirements = [{|LB|    "name": flow.name,|LB|    "description": flow.description|LB|}]'></processor>
					<processor type="emit-event" id="unHTRT" ref="RequirementAdded">
						<mapping target="name" value="#flow.regulation"></mapping>
						<mapping target="requirements" value="#flow.requirements"></mapping>
					</processor>
					<test-case name="HappyFlow" trigger-event="AddRequirementRegulationRequested">
						<input name="name" value="req1" type="String"></input>
						<input name="description" value="description" type="String"></input>
						<input name="regulation" value="gdpr" type="String"></input>
						<expected domain-event="RequirementAdded">
							<field value="gdpr" name="name" type="String"></field>
						</expected>
						<expected-state pk="gdpr">{
  "requirements": {
    "req1": {
      "name": "req1",
      "description": "description"
    }
  }
}</expected-state>
					</test-case>
				</command>
				<event-handler on="RegulationCreated">
					<mapping target="name" operand="set" value="name"></mapping>
				</event-handler>
				<event-handler on="RequirementAdded">
					<nested-mapping source="requirements" target="requirements" business-key="name">
						<mapping target="name" operand="set" value="name"></mapping>
						<mapping target="description" operand="set" value="description"></mapping>
					</nested-mapping>
				</event-handler>
				<nested-object name="requirements" business-key="name">
					<field name="name" type="String"></field>
					<field name="description" type="String"></field>
				</nested-object>
			</aggregate>
		</subdomain>
		<subdomain name="Customer">
			<aggregate name="Company" business-key="name" event-ttl="-1" snapshot-interval="100" backup-interval-days="0" backup-ttl-days="0">
				<field name="name" type="String"></field>
				<command name="UpdateControls">
					<trigger source="UpdateControlRequested" key-field="company">
						<mapping target="company" value="company"></mapping>
						<mapping target="controls" value="controls"></mapping>
					</trigger>
					<processor type="emit-event" id="G8hyQG" ref="UpdatedControl">
						<mapping target="name" value="#flow.company"></mapping>
						<mapping target="controls" value="#flow.controls"></mapping>
					</processor>
					<test-case name="HappyFlow" trigger-event="UpdateControlRequested">
						<input name="company" value="draftsman" type="String"></input>
						<input name="controls" type="NestedObject">[
  {
    "name": "hello",
    "linkedRequirements": "gdpr:req1",
    "description": "Hello World"
  }
]</input>
						<expected domain-event="UpdatedControl">
							<field value="draftsman" name="name" type="String"></field>
						</expected>
						<expected-state pk="draftsman">{
  "controls": {
    "hello": {
      "description": "Hello World",
      "linkedRequirements": "gdpr:req1",
      "name": "hello"
    }
  }
}</expected-state>
					</test-case>
				</command>
				<command name="Create">
					<trigger source="CreateCompanyRequested" key-field="name">
						<mapping target="name" value="name"></mapping>
					</trigger>
					<processor type="emit-event" id="R3IcSi" ref="CompanyCreated">
						<mapping target="name" value="#flow.name"></mapping>
					</processor>
					<test-case name="HappyFlow" trigger-event="CreateCompanyRequested">
						<input name="name" value="draftsman" type="String"></input>
						<expected domain-event="CompanyCreated">
							<field value="draftsman" name="name" type="String"></field>
						</expected>
						<expected-state pk="draftsman">{
  "name": "draftsman"
}</expected-state>
					</test-case>
				</command>
				<command name="LinkRegulation">
					<trigger source="LinkRegulationCompanyRequested" key-field="companyName">
						<mapping target="companyName" value="companyName"></mapping>
						<mapping target="regulationName" value="regulationName"></mapping>
					</trigger>
					<processor type="code" id="Hnas9F" file="" handler="" code='flow.regulations = [{|LB|    "name": flow.regulationName,|LB|    "link": flow.companyName + ":" + flow.regulationName|LB|}]'></processor>
					<processor type="emit-event" id="z3aR5J" ref="LinkedRegulation">
						<mapping target="name" value="#flow.companyName"></mapping>
						<mapping target="regulations" value="#flow.regulations"></mapping>
					</processor>
					<test-case name="HappyFlow" trigger-event="LinkRegulationCompanyRequested">
						<input name="companyName" value="draftsman" type="String"></input>
						<input name="regulationName" value="GDPR" type="String"></input>
						<expected domain-event="LinkedRegulation">
							<field value="draftsman" name="name" type="String"></field>
						</expected>
						<expected-state pk="draftsman">{
  "regulations": {
    "GDPR": {
      "name": "GDPR",
      "link": "draftsman:GDPR"
    }
  }
}</expected-state>
					</test-case>
				</command>
				<event-handler on="CompanyCreated">
					<mapping target="name" operand="set" value="name"></mapping>
				</event-handler>
				<event-handler on="UpdatedControl">
					<nested-mapping source="controls" target="controls" business-key="name">
						<mapping target="description" operand="set" value="description"></mapping>
						<mapping target="linkedRequirements" operand="set" value="linkedRequirements"></mapping>
						<mapping target="name" operand="set" value="name"></mapping>
					</nested-mapping>
				</event-handler>
				<event-handler on="LinkedRegulation">
					<nested-mapping source="regulations" target="regulations" business-key="name">
						<mapping target="name" operand="set" value="name"></mapping>
						<mapping target="link" operand="set" value="link"></mapping>
					</nested-mapping>
				</event-handler>
				<nested-object name="regulations" business-key="name">
					<field name="name" type="String"></field>
					<field name="link" type="String"></field>
				</nested-object>
				<nested-object name="controls" business-key="name">
					<field name="description" type="String"></field>
					<field name="linkedRequirements" type="StringList"></field>
					<field name="name" type="String"></field>
				</nested-object>
			</aggregate>
		</subdomain>
	</domain>
	<views>
		<view name="Requirement" data-retention-days="-1" exclude-notification="false">
			<field name="name" type="String"></field>
			<field name="description" type="String"></field>
			<field name="arn" type="String" pk="true"></field>
			<field name="templates" type="OneToMany" ref="ControlTemplate" authorization="authenticated" foreign-key="#canonical"></field>
			<field name="parent" type="String"></field>
			<field name="regulation" type="ManyToOne" ref="Regulation" authorization="authenticated" foreign-key="parent"></field>
			<custom-handler id="5hY6ME" sub-domain="Regulations" aggregate="Regulation">for requirement in snapshot.requirements.values():
    key = snapshot.name + ":" + requirement.name
    entity = EntityManager.get(type="Requirement", key=key)
    entity.name = requirement.name
    entity.description = requirement.description
    entity.arn = key
    entity.parent = snapshot.name
    if snapshot.isDeleted != '':
        entity.mark_for_deletion = True</custom-handler>
			<query graphql-namespace="Requirement" field-name="get" type="get" authorization="authenticated"></query>
		</view>
		<view name="LinkedRegulation" data-retention-days="-1" exclude-notification="false">
			<field name="companyName" type="String"></field>
			<field name="link" type="String" pk="true"></field>
			<field name="regulationName" type="String"></field>
			<field name="company" type="ManyToOne" ref="Company" authorization="authenticated" foreign-key="company"></field>
			<field name="regulation" type="ManyToOne" ref="Regulation" authorization="authenticated" foreign-key="regulationName"></field>
			<custom-handler id="IObrtF" sub-domain="Customer" aggregate="Company">for link in snapshot.regulations.values():
    entity = EntityManager.get(type="LinkedRegulation", key=link.link)
    entity.companyName = snapshot.name
    entity.regulationName = link.name
    if snapshot.isDeleted != '':
        entity.mark_for_deletion = True</custom-handler>
			<query graphql-namespace="LinkedRegulation" field-name="get" type="get" authorization="authenticated"></query>
		</view>
		<view name="ControlTemplate" data-retention-days="-1" exclude-notification="false">
			<field name="arn" type="String" pk="true"></field>
			<field name="description" type="String"></field>
			<field name="parent" type="String"></field>
			<field name="requirement" type="ManyToOne" ref="Requirement" authorization="authenticated" foreign-key="parent"></field>
			<custom-handler id="bq3rtY" sub-domain="Regulations" aggregate="ControlTemplate">entity = EntityManager.get(type="ControlTemplate", key=snapshot.arn)
entity.arn = snapshot.arn
entity.description = snapshot.description
entity.parent = ":".join(entity.arn.split(":")[:2])
if snapshot.isDeleted != '':
    entity.mark_for_deletion = True</custom-handler>
			<query graphql-namespace="ControlTemplate" field-name="get" type="get" authorization="authenticated"></query>
		</view>
		<view name="Regulation" data-retention-days="-1" exclude-notification="false">
			<field name="name" type="String" pk="true"></field>
			<field name="requirements" type="OneToMany" ref="Requirement" authorization="authenticated" foreign-key="#canonical"></field>
			<snapshot-handler id="YIkRKr" sub-domain="Regulations" aggregate="Regulation" key-mapping="name" processor="item">
				<mapping target="name" operand="set" value="name"></mapping>
				<delete condition="#snapshot.isDeleted != ''"></delete>
			</snapshot-handler>
			<query graphql-namespace="Regulation" field-name="filter" type="filter" authorization="authenticated"></query>
			<query graphql-namespace="Regulation" field-name="get" type="get" authorization="authenticated"></query>
		</view>
		<view name="Control" data-retention-days="-1" exclude-notification="false">
			<field name="description" type="String"></field>
			<field name="linkedRequirements" type="StringList"></field>
			<field name="name" type="String"></field>
			<field name="arn" type="String" pk="true"></field>
			<field name="requirements" type="ManyToMany" ref="Requirement" authorization="authenticated" foreign-key="linkedRequirements"></field>
			<field name="company" type="String"></field>
			<field name="company" type="ManyToOne" ref="Company" authorization="authenticated" foreign-key="company"></field>
			<custom-handler id="XGVguP" sub-domain="Customer" aggregate="Company">for control in snapshot.controls.values():
    key = snapshot.name + ":" + control.name
    entity = EntityManager.get(type="Control", key=key)
    entity.name = control.name
    entity.arn = key
    entity.description = control.description
    entity.linkedRequirements = control.linkedRequirements.split(";")
    entity.company = snapshot.name
    if snapshot.isDeleted != '':
        entity.mark_for_deletion = True</custom-handler>
			<query graphql-namespace="Control" field-name="get" type="get" authorization="authenticated"></query>
		</view>
		<view name="Company" data-retention-days="-1" exclude-notification="false">
			<field name="name" type="String" pk="true"></field>
			<field name="linkedRegulation" type="OneToMany" ref="LinkedRegulation" authorization="authenticated" foreign-key="#canonical"></field>
			<field name="controls" type="OneToMany" ref="Control" authorization="authenticated" foreign-key="#canonical"></field>
			<snapshot-handler id="RYtduk" sub-domain="Customer" aggregate="Company" key-mapping="name" processor="item">
				<mapping target="name" operand="set" value="name"></mapping>
				<delete condition="#snapshot.isDeleted != ''"></delete>
			</snapshot-handler>
			<query graphql-namespace="Company" field-name="get" type="get" authorization="authenticated"></query>
		</view>
	</views>
	<projections>
	</projections>
	<notifiers>
		<notifier name="InitializeSystemUser">
			<trigger source="@afterDeployment">
				<mapping target="dummy" value="#''"></mapping>
			</trigger>
			<activity type="iam-create-systemuser" fail-silent="true" id="vMB9LZ"></activity>
		</notifier>
	</notifiers>
	<functional-scenarios clean-db="true" clean-iam="true" minimum-event-coverage="80" minimum-view-coverage="80">
		<scenario name="ConfigureRegulation">
			<activity type="set-variables" id="bU0XE6">
				<input name="regulationName" type="String" value="GDPR"></input>
				<input name="tmp" type="String" value="Trigger Deployment"></input>
			</activity>
			<activity type="mutation" id="PyQxLd" path="Regulation.create" description="Create new regulation">
				<input name="name" type="String" value="#regulationName#"></input>
				<expected-trace command="Regulations.Regulation.Create" status="success"></expected-trace>
			</activity>
			<activity type="mutation" id="DcrFV9" description="Add requirement to regulation" path="Regulation.addRequirement">
				<input name="name" type="String" value="req1"></input>
				<input name="description" type="String" value="requirement number 1"></input>
				<input name="regulation" type="String" value="GDPR"></input>
				<expected-trace command="Regulations.Regulation.AddRequirement" status="success"></expected-trace>
			</activity>
			<activity type="set-variables" id="5stgkc" description="Expected values">
				<input name="requirement" type="String" value="req1"></input>
				<input name="requirementKey" type="String" value="GDPR:req1"></input>
			</activity>
			<activity type="query" id="2BGA4L" description="Assert new regulation is created" path="Regulation.get" view="Regulation">
				<input name="key" type="String" value="#regulationName#"></input>
				<expect-value name="name" type="String" value="#regulationName#"></expect-value>
				<expect-value name="requirements.0.name" type="String" value="#requirement#"></expect-value>
			</activity>
			<activity type="query" id="dEq3Zs" description="Query requirement" path="Requirement.get" view="Requirement">
				<input name="key" type="String" value="#requirementKey#"></input>
				<expect-value name="name" type="String" value="#requirement#"></expect-value>
			</activity>
			<activity type="set-variables" id="eZjgBn" description="Template params">
				<input name="arn" type="String" value="GDPR:req1:template"></input>
				<input name="description" type="String" value="lorem ipsum"></input>
			</activity>
			<activity type="mutation" id="CDmSg1" path="ControlTemplate.create" description="Create control template">
				<input name="arn" type="String" value="#arn#"></input>
				<input name="description" type="String" value="#description#"></input>
				<expected-trace command="Regulations.ControlTemplate.Create" status="success"></expected-trace>
			</activity>
			<activity type="query" id="pXUY5u" path="ControlTemplate.get" view="ControlTemplate" description="Fetch control template">
				<input name="key" type="String" value="#arn#"></input>
				<expect-value name="description" type="String" value="#description#"></expect-value>
			</activity>
			<activity type="set-variables" id="JqKHur" description="company params">
				<input name="company" type="String" value="draftsman"></input>
				<input name="link" type="String" value="draftsman:GDPR"></input>
			</activity>
			<activity type="mutation" id="Un0gD4" description="Create company" path="Company.create">
				<input name="name" type="String" value="#company#"></input>
				<expected-trace command="Customer.Company.Create" status="success"></expected-trace>
			</activity>
			<activity type="mutation" id="p6cxU8" path="Company.linkRegulation" description="Link regulation to company">
				<input name="companyName" type="String" value="#company#"></input>
				<input name="regulationName" type="String" value="#regulationName#"></input>
				<expected-trace command="Customer.Company.LinkRegulation" status="success"></expected-trace>
			</activity>
			<activity type="query" id="6o9DBs" path="Company.get" view="Company" description="Fetch company">
				<input name="key" type="String" value="#company#"></input>
				<expect-value name="name" type="String" value="#company#"></expect-value>
			</activity>
			<activity type="query" id="SLxavg" path="LinkedRegulation.get" view="LinkedRegulation" description="Fetch link">
				<input name="key" type="String" value="#link#"></input>
				<expect-value name="companyName" type="String" value="#company#"></expect-value>
				<expect-value name="regulationName" type="String" value="#regulationName#"></expect-value>
			</activity>
			<activity type="set-variables" id="KKJ8ky" description="prepare control">
				<input name="company" type="String" value="draftsman"></input>
				<input name="controls" type="Nested" value="[{'name':'control1','description':'Hello World!','linkedRequirements':'GDPR:req1'}]"></input>
				<input name="controlKey" type="String" value="draftsman:control1"></input>
				<input name="controlName" type="String" value="control1"></input>
			</activity>
			<activity type="mutation" id="EvM97b" path="Control.update" description="Update control">
				<input name="company" type="String" value="#company#"></input>
				<input name="controls" type="Nested" value="#controls#"></input>
				<expected-trace command="Customer.Company.UpdateControls" status="success"></expected-trace>
			</activity>
			<activity type="query" id="BLFTzM" description="Assert control" path="Control.get" view="Control">
				<input name="key" type="String" value="#controlKey#"></input>
				<expect-value name="company.0.name" type="String" value="#company#"></expect-value>
				<expect-value name="name" type="String" value="#controlName#"></expect-value>
				<expect-value name="requirements.0.name" type="String" value="#requirement#"></expect-value>
			</activity>
		</scenario>
	</functional-scenarios>
</draftsman>